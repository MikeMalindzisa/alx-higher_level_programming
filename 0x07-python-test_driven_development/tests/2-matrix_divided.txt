Tests for a function that divides all elements of a matrix.


Import the function:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test Case 1: Divide All Elements by 3 (Positive Numbers):

    >>> matrix1 = [[12.3, 8.7, 5.2], [3.0, 2.5, 9.1], [0.0, 7.1, 10.5]]
    >>> matrix_divided(matrix1, 3)
    [[4.1, 2.9, 1.73], [1.0, 0.83, 3.03], [0.0, 2.37, 3.5]]

Test Case 2: Divide All Elements by 3 (Negative Numbers):

    >>> matrix2 = [[-12.3, -8.7, -5.2], [-3.0, -2.5, -9.1], [0.0, -7.1, -10.5]]
    >>> matrix_divided(matrix2, 3)
    [[-4.1, -2.9, -1.73], [-1.0, -0.83, -3.03], [0.0, -2.37, -3.5]]

Test Case 3: Divide All Elements by 2.5 (Mixed Numbers):

    >>> matrix3 = [[10.5, -5.5, 7.0], [-2.5, 1.0, 9.0], [0.0, 5.5, -7.5]]
    >>> matrix_divided(matrix3, 2.5)
    [[4.2, -2.2, 2.8], [-1.0, 0.4, 3.6], [0.0, 2.2, -3.0]]

Test Case 4: Divide All Elements by 1 (No Change):

    >>> matrix4 = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
    >>> matrix_divided(matrix4, 1)
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Test Case 5: Divide All Elements by 0.5 (Double):

    >>> matrix5 = [[10, 20, 30], [40, 50, 60]]
    >>> matrix_divided(matrix5, 0.5)
    [[20.0, 40.0, 60.0], [80.0, 100.0, 120.0]]

-----------------
Test Error Cases:
-----------------

Test Case 6: Invalid Matrix (Not a List):

    >>> invalid_matrix1 = {'a': 1, 'b': '2'}
    >>> matrix_divided(invalid_matrix1, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test Case 7: Invalid Matrix (List of Different Types):

    >>> invalid_matrix2 = [[1, 2.68], "Breakfast", 1]
    >>> matrix_divided(invalid_matrix2, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test Case 8: Invalid Matrix (Elements Not Int or Float):

    >>> invalid_matrix3 = [[1, 2.68], [0, 'b'], ['a', 3]]
    >>> matrix_divided(invalid_matrix3, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test Case 9: Invalid Matrix (None):

    >>> invalid_matrix4 = None
    >>> matrix_divided(invalid_matrix4, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test Case 10: Invalid Div (None):

    >>> invalid_div1 = [[10, 7, 3.5], [2.5, 1, 9]]
    >>> matrix_divided(invalid_div1, None)
    Traceback (most recent call last):
    TypeError: div must be a number

Test Case 11: Invalid Matrix (None) and Invalid Div (None):

    >>> invalid_matrix5 = None
    >>> matrix_divided(invalid_matrix5, None)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test Case 12: Invalid Div (Zero):

    >>> invalid_div2 = [[10, 7, 3.5], [2.5, 1, 9]]
    >>> matrix_divided(invalid_div2, 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Test Case 13: Invalid Matrix (Rows of Different Lengths):

    >>> invalid_matrix6 = [[1, 2], [2, 3], [4]]
    >>> matrix_divided(invalid_matrix6, 3)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

---------------------------------
pycodestyle Style Check:
---------------------------------

    >>> import os
    >>> os.popen("pycodestyle 2-matrix_divided.py").read()
    ''
